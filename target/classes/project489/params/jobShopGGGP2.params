#print-unaccessed-params = true
#print-used-params = true

# ==============================
# Administrative parameters
# ==============================
evalthreads = 1
breedthreads = 1
seed.0 = 4
checkpoint = false
checkpoint-modulo = 1
checkpoint-prefix = ec

# ==============================
# Basic evolution parameters
# ==============================

state = project489.gp.EvolutionState

#specifies how the evolutionary run finishes
finish = ec.simple.SimpleFinisher

#Defines the exhchanged for migrating indivudals between pops
exch = ec.simple.SimpleExchanger

#defines the evaluator, which evaluates the fitness for an individual
breed = ec.simple.SimpleBreeder
eval = ec.simple.SimpleEvaluator
stat.fitness.print-raw = true

#controls statisticis gathering and reporting
stat = ec.simple.SimpleStatistics
state.file = $out.stat

#configures a child stats object to gather GP specific stats
stat.num-children = 1
stat.child.0 = project489.stats.CustomStats
stat.child.0.file_name = stats_GGGP2.csv
stat.child.0.file = $outtabular.stat


project489.stats.replication = 1

stat.child.0.file = $outtabular.stat

#run the evolutionary process for 50 gens
generations = 50

#exits from ECJ one all generation are done
quit-on-run-complete = true

init = ec.gp.GPInitializer



#defines the population object to use
pop = ec.Population

#defines the sub pop
pop.subpops = 1
pop.subpop.0 = ec.Subpopulation
pop.subpop.0.size = 200
#define elitism, keep best 10 individuals
breed.elite.0 = 10

# ==============================
# GP general parameters
# ==============================

# ------------------------------
# GP representation
# ------------------------------

#make entire population use GP
#pop.subpop.0.species = ec.gp.GPSpecies

#set individuals settings - use GP
#pop.subpop.0.species.ind = ec.gp.GPIndividual

# each individual consists of one tree
#pop.subpop.0.species.ind.numtrees = 1

#for a given individual set the tree (which may contain many) with a GPtree
#pop.subpop.0.species.ind.tree.0 = ec.gp.GPTree
#pop.subpop.0.species.ind.tree.0.tc = tc0

# ------------------------------
# GP Grammar Ind
# ------------------------------

pop.subpop.0.species.init = ec.gp.ge.GEInitializer
pop.subpop.0.species = ec.gp.ge.GESpecies
pop.subpop.0.species.parser = ec.gp.ge.GrammarParser
pop.subpop.0.species.ind = ec.gp.ge.GEIndividual
pop.subpop.0.species.mutation-type = reset


pop.subpop.0.species.min-gene = -127
pop.subpop.0.species.max-gene = 127

pop.subpop.0.species.passes = 64

pop.subpop.0.species.mutation-prob = 0.4
pop.subpop.0.species.crossover-type = two
#pop.subpop.0.species.genome-size = 500


pop.subpop.0.species.genome-size = geometric
pop.subpop.0.species.geometric-prob = 0.85
pop.subpop.0.species.min-initial-size = 200
pop.subpop.0.species.max-initial-size = 500

# ------------------------------
# GP Grammar
# ------------------------------

ge.species.file.0 = tardiness_TDR.gr

# ------------------------------
# Fitness
# ------------------------------

#Allow the fitness of the population to be multi objective
#pop.subpop.0.species.fitness = ec.multiobjective.MultiObjectiveFitness
pop.subpop.0.species.fitness = ec.gp.koza.KozaFitness

#only evaluate one objective
pop.subpop.0.species.fitness.num-objectives = 1
pop.subpop.0.species.fitness.maximize = false

#GP will generate new individual if it's a duplicate, up to 100 times
pop.subpop.0.duplicate-retries = 30



#-------------------------------
# Pipeline from ECJ manual
#-------------------------------

pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.num-sources = 3
pop.subpop.0.species.pipe.source.0 = ec.vector.breed.ListCrossoverPipeline
pop.subpop.0.species.pipe.source.0.source.0 = ec.gp.ge.breed.GETruncationPipeline
pop.subpop.0.species.pipe.source.0.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1 = same
pop.subpop.0.species.pipe.source.0.prob = 0.9
pop.subpop.0.species.pipe.source.1 = ec.vector.breed.GeneDuplicationPipeline
pop.subpop.0.species.pipe.source.1.source.0 = ec.gp.ge.breed.GETruncationPipeline
pop.subpop.0.species.pipe.source.1.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.1.prob = 0.05
pop.subpop.0.species.pipe.source.2 = ec.vector.breed.VectorMutationPipeline
pop.subpop.0.species.pipe.source.2.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.2.prob = 0.05


# ------------------------------
# Genetic Operators (PIPELINE)
# ------------------------------
# Fixed Breeding Pipeline
#pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
#pop.subpop.0.species.pipe.generate-max = false
#pop.subpop.0.species.pipe.num-sources = 2

# Crossover Pipeline - Fixed
#pop.subpop.0.species.pipe.source.0 = ec.vector.breed.ListCrossoverPipeline
#pop.subpop.0.species.pipe.source.0.prob = 0.5
#pop.subpop.0.species.pipe.source.0.source.0 = ec.select.TournamentSelection
#pop.subpop.0.species.pipe.source.0.source.1 = ec.select.TournamentSelection

# Mutation Pipeline
#pop.subpop.0.species.pipe.source.1 = ec.vector.breed.VectorMutationPipeline
#pop.subpop.0.species.pipe.source.1.prob = 0.5
#pop.subpop.0.species.pipe.source.1.source.0 = ec.select.TournamentSelection

# GE Vector-specific parameters (equivalent to your Koza parameters)
# These control the GE crossover behavior
#vector.species.crossover-type = one  # One-point crossover (similar to tree crossover)
#vector.species.mutation-prob = 0.6   # Probability of mutating each gene

# ------------------------------
# Tournament Selection Size
# ------------------------------


select.tournament.size = 7

# ------------------------------
# Tournament Selection Size
# ------------------------------

#declaring one atomic type
#dictates what types there are
#there is only one type
gp.type.a.size = 1
gp.type.a.0.name = nil
gp.type.s.size = 0


# ------------------------------
# GP Hacks
# ------------------------------

pop.subpop.0.species.gp-species = ec.gp.GPSpecies
#pop.subpop.0.species.gp-species.fitness = ec.multiobjective.MultiObjectiveFitness
pop.subpop.0.species.gp-species.fitness = ec.gp.koza.KozaFitness
#pop.subpop.0.species.gp-species.fitness.num-objectives = 1

pop.subpop.0.species.gp-species.ind = ec.gp.GPIndividual
pop.subpop.0.species.gp-species.ind.numtrees = 1

pop.subpop.0.species.gp-species.pipe = ec.breed.ReproductionPipeline
pop.subpop.0.species.gp-species.pipe.num-sources = 1
pop.subpop.0.species.gp-species.pipe.source.0 = ec.select.TournamentSelection


# ------------------------------
# Tree contraints
# ------------------------------

#add one tree constraints
gp.tc.size = 1

#declares that is a tree contraint
gp.tc.0 = ec.gp.GPTreeConstraints

#label of the contraint
gp.tc.0.name = tc0

#function set used by the tree
gp.tc.0.fset = f0

#Sets the return type of the tree's root node
#Nil is a generic type used in untype GP
#If strongly typed add boolean or double
gp.tc.0.returns = nil

#defines the tree-building method used during initialization
gp.tc.0.init = ec.gp.koza.HalfBuilder

# ------------------------------
# Koza Half builder Parameters
# ------------------------------
gp.ge.min-depth = 6
gp.ge.max-depth = 8

gp.koza.half.min-depth = 4
gp.koza.half.max-depth = 8
gp.koza.half.growp = 0.5




# ------------------------------
# GP contraint nodes
# ------------------------------

#Number of node constraints

gp.nc.size = 5

# Nodes with 0 children (terminal)
gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = nc0
gp.nc.0.size = 0

#enforces used to enforce what types and arities nodes are allowed

#declare that this constraint is an instance of GPNode constraints
#each GP node must ferences a node contraint
gp.nc.1 = ec.gp.GPNodeConstraints

#Contraint name
gp.nc.1.name = nc2

#returns any type
gp.nc.1.returns = nil

#Specifies that the node takes 2 children
gp.nc.1.size = 2

#Each child must also return nil, matcging the expected input type
#if strongly typed you'd use types like boolean, int, or float

gp.nc.1.child.0 = nil
gp.nc.1.child.1 = nil

# constraints for 3 nodes

gp.nc.2 = ec.gp.GPNodeConstraints
gp.nc.2.name = nc3
gp.nc.2.returns = nil
gp.nc.2.size =  3

gp.nc.2.child.0 = nil
gp.nc.2.child.1 = nil
gp.nc.2.child.2 = nil

#Constraints for 4 nodes

gp.nc.3 = ec.gp.GPNodeConstraints
gp.nc.3.name = nc4
gp.nc.3.returns = nil
gp.nc.3.size =  4

gp.nc.3.child.0 = nil
gp.nc.3.child.1 = nil
gp.nc.3.child.2 = nil
gp.nc.3.child.3 = nil


#Constraints for 1 node

gp.nc.4 = ec.gp.GPNodeConstraints
gp.nc.4.name = nc1
gp.nc.4.returns = nil
gp.nc.4.size = 1

gp.nc.4.child.0 = nil



# ------------------------------
# ADF Parameters
# ------------------------------

#Tells ecj to use ADFSTACK, which is capable of handaling multiple call frames for nested function calls

# GP ADF parameters
gp.problem.stack = ec.gp.ADFStack
gp.adf-stack.context = ec.gp.ADFContext


# ==============================
# Function or Termnial Set
# ==============================

# Adds no children constraints
gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = nc0
gp.nc.0.returns = nil
gp.nc.0.size = 0


#only look at one function set

gp.fs.size = 1
gp.fs.0.name = f0
gp.fs.0.size = 38
gp.fs.0 = ec.gp.GPFunctionSet

# Function set
gp.fs.0.func.0 = project489.jobShop.function.Add
#defines how many parameters it takes
gp.fs.0.func.0.nc = nc2

gp.fs.0.func.1 = project489.jobShop.function.Sub
gp.fs.0.func.1.nc = nc2

gp.fs.0.func.2 = project489.jobShop.function.Div
gp.fs.0.func.2.nc = nc2

gp.fs.0.func.3 = project489.jobShop.function.If
gp.fs.0.func.3.nc = nc3

gp.fs.0.func.4 = project489.jobShop.function.Max
gp.fs.0.func.4.nc = nc2

gp.fs.0.func.5 = project489.jobShop.function.Min
gp.fs.0.func.5.nc = nc2

gp.fs.0.func.6 = project489.jobShop.function.Mul
gp.fs.0.func.6.nc = nc2

gp.fs.0.func.7 = project489.jobShop.function.Exp
gp.fs.0.func.7.nc = nc1

# Terminal Set
gp.fs.0.func.8 = project489.jobShop.terminal._0
gp.fs.0.func.8.nc = nc0

gp.fs.0.func.9 = project489.jobShop.terminal._1
gp.fs.0.func.9.nc = nc0

gp.fs.0.func.10 = project489.jobShop.terminal.NPT
gp.fs.0.func.10.nc = nc0

gp.fs.0.func.11 = project489.jobShop.terminal.OpsLeft
gp.fs.0.func.11.nc = nc0

gp.fs.0.func.12 = project489.jobShop.terminal.PT
gp.fs.0.func.12.nc = nc0

gp.fs.0.func.13 = project489.jobShop.terminal.RemProcTime
gp.fs.0.func.13.nc = nc0

gp.fs.0.func.14 = project489.jobShop.terminal.TimeInQueue
gp.fs.0.func.14.nc = nc0

gp.fs.0.func.15 = project489.jobShop.terminal.TimeInSystem
gp.fs.0.func.15.nc = nc0

gp.fs.0.func.16 = project489.jobShop.terminal.SLACK
gp.fs.0.func.16.nc = nc0

gp.fs.0.func.17 = project489.jobShop.terminal.LLD
gp.fs.0.func.17.nc = nc0

gp.fs.0.func.18 = project489.jobShop.terminal.SSD
gp.fs.0.func.18.nc = nc0

gp.fs.0.func.19 = project489.jobShop.terminal.ODD
gp.fs.0.func.19.nc = nc0

gp.fs.0.func.20 = project489.jobShop.terminal.WINQ
gp.fs.0.func.20.nc = nc0

gp.fs.0.func.21 = project489.jobShop.terminal.SPT
gp.fs.0.func.21.nc = nc0

gp.fs.0.func.22 = project489.jobShop.terminal._2
gp.fs.0.func.22.nc = nc0

gp.fs.0.func.23 = project489.jobShop.terminal._5
gp.fs.0.func.23.nc = nc0

gp.fs.0.func.24 = project489.jobShop.terminal._10
gp.fs.0.func.24.nc = nc0

gp.fs.0.func.25 = project489.jobShop.terminal._01
gp.fs.0.func.25.nc = nc0

gp.fs.0.func.26 = project489.jobShop.terminal._05
gp.fs.0.func.26.nc = nc0

gp.fs.0.func.27 = project489.jobShop.terminal._02
gp.fs.0.func.27.nc = nc0

gp.fs.0.func.28 = project489.jobShop.terminal.TimeTillDue
gp.fs.0.func.28.nc = nc0

gp.fs.0.func.29 = project489.jobShop.function.GT
gp.fs.0.func.29.nc = nc2

gp.fs.0.func.30 = project489.jobShop.function.LT
gp.fs.0.func.30.nc = nc2

gp.fs.0.func.31 = project489.jobShop.function.Equal
gp.fs.0.func.31.nc = nc2

gp.fs.0.func.32 = project489.jobShop.function.If_ex
gp.fs.0.func.32.nc = nc3

gp.fs.0.func.33 = project489.jobShop.terminal.Util
gp.fs.0.func.33.nc = nc0

gp.fs.0.func.34 = project489.jobShop.terminal._095
gp.fs.0.func.34.nc = nc0

gp.fs.0.func.35 = project489.jobShop.terminal._09
gp.fs.0.func.35.nc = nc0

gp.fs.0.func.36 = project489.jobShop.terminal._085
gp.fs.0.func.36.nc = nc0

gp.fs.0.func.37 = project489.jobShop.terminal._08
gp.fs.0.func.37.nc = nc0


pop.subpop.0.species.gp-function-set = fs
pop.subpop.0.species.gp-species.ind.tree.0 = ec.gp.GPTree
pop.subpop.0.species.gp-species.ind.tree.0.tc = tc0


# ==============================
# Problem definition
# ==============================

#which problem file will be used
#or how the individuals evaluated


eval.problem = ec.gp.ge.GEProblem
eval.problem.problem = project489.problem.JobShopProblem
#eval.problem = project489.problem.JobShopProblem
eval.problem.problem.data = project489.data.DoubleData

eval.problem.problem.objective.mode = mean
eval.problem.problem.objective.metric = tardiness

eval.problem.problem.sim.num = 1
eval.problem.problem.sim.replication = 3
eval.problem.problem.sim.seed = 23
eval.problem.problem.sim.seedRotate = 1000

eval.problem.problem.sim.0.numOfMachines = 10
eval.problem.problem.sim.0.maxJobs = 2500
eval.problem.problem.sim.0.warmupJobs = 500
eval.problem.problem.sim.0.numOps = 10
eval.problem.problem.sim.0.util = 0.95
eval.problem.problem.sim.0.DueDateAllowance = 1.0