#print-unaccessed-params = true
#print-used-params = true

# ==============================
# Administrative parameters
# ==============================
evalthreads = 1
breedthreads = 1
seed.0 = 4
checkpoint = false
checkpoint-modulo = 1
checkpoint-prefix = ec

# ==============================
# Basic evolution parameters
# ==============================

#defines the main class for managing evolutionary process
#Gives centralized, domain-aware control over the evolutionary process
#main driver of the evolution process defining
#startFresh() - what happens before the first generation
#evolve() - what happens each generation
#finish() - how the evolution ends
#subject to change
state = ec.simple.SimpleEvolutionState

#specifies how the evolutionary run finishes
finish = ec.simple.SimpleFinisher

#Defines the exhchanged for migrating indivudals between pops
exch = ec.simple.SimpleExchanger

#defines the evaluator, which evaluates the fitness for an individual
breed = ec.simple.SimpleEvaluator

#controls statisticis gathering and reporting
#stat = ec.simple.SimpleStatistics
state.file = $out.stat

#configures a child stats object to gather GP specific stats
stat.num-children = 1
stat.child.0 = ec.gp.koza.KozaShortStatistics
stat.child.0.file = $outtabular.stat

#run the evolutionary process for 50 gens
generations = 50

#exits from ECJ one all generation are done
quit-on-run-complete = true

#defines the population object to use
pop = ec.Population

#defines the sub pop
pop.subpops = 1
pop.subpop.0 = ec.Subpopulation
pop.subpop.0.size = 500

#define elitism, keep best 10 individuals
breed.elite.0 = 10


# ==============================
# GP general parameters
# ==============================

# ------------------------------
# GP representation
# ------------------------------

#make entire population use GP
pop.subpop.0.species = ec.gp.GPSpecies

#set individuals settings - use GP
pop.subpop.0.species.ind = ec.gp.GPIndividual

# each individual consists of one tree
pop.subpop.0.species.ind.numtrees = 1

#for a given individual set the tree (which may contain many) with a GPtree
pop.subpop.0.species.ind.tree.0 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.0.tc = tc0

# ------------------------------
# Fitness
# ------------------------------

#Allow the fitness of the population to be multi objective
pop.subpop.0.species.fitness = ec.multiobjective.MultiObjectiveFitness

#only evaluate one objective
pop.subpop.0.species.fitness.num-objectives = 1
pop.subpop.0.species.fitness.maximize = fasle

#GP will generate new individual if it's a duplicate, up to 100 times
pop.subpop.0.duplicate-retries = 100


# ------------------------------
# Genetic Operators
# ------------------------------

#set selection mechnism to tournament Selection
breed.reproduce.Source.0 = ec.select.TournamentSelection

#Both parents use Tournament selection to pick parents
#"source" what parents are picked
gp.koza.xover.source.0 = ec.select.TournamentSelection
gp.koza.xover.source.1 - name

#decides which subnodes are picked for swapping
#"ns" dictates how a node is picked
gp.koza.xover.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.xover.ns.1 = same

#dictates the resulting child trees must not exceed the number
gp.koza.xover.maxdepth = 8

#tries to produce one valid cross over
gp.koza.xover.tries = 1

#mutation for GP

#set selection mechnism to tournament Selection
gp.koza.mutate.source.0 = ec.select.TournamentSelection

#decides which subnodes are picked for mutating
#"ns" dictates how a node is picked
gp.koza.mutate.ns.0 = ec.gp.koza.KozaNodeSelector

gp.koza.mutate.build.0 = ec.gp.koza.GrowBuilder
gp.koza.mutate.maxdepth = 8
gp.koza.mutate.tries = 1

# ------------------------------
# Tournament Selection Size
# ------------------------------

select.tournament.size = 7

# sub tree mutation is depth fixed at 4
gp.koza.grow.min-depth = 4
gp.koza.grow.max-depth = 4

gp.koza.ns.terminals = 0.1
gp.koza.ns.nonterminals = 0.9
gp.koza.ns.root = 0.0

# ------------------------------
# Tournament Selection Size
# ------------------------------

#declaring one atomic type
#dictates what types there are
#there is only one type
gp.type.a.size = 1
gp.type.a.0.name = nil
gp.type.s.size = 0


# ------------------------------
# Tree contraints
# ------------------------------

#add one tree constraints
gp.tc.size = 1

#declares that is a tree contraint
gp.tc.0 = ec.gp.GPTreeConstraints

#label of the contraint
gp.tc.0.name = tc0

#function set used by the tree
gp.tc.0.fset = f0

#Sets the return type of the tree's root node
#Nil is a generic type used in untype GP
#If strongly typed add boolean or double
gp.tc.0.returns = nil

#defines the tree-building method used during initialization
gp.tc.0.init = ec.gp.koza.HalfBuilder


# ------------------------------
# Koza Half builder Parameters
# ------------------------------

gp.koza.half.min-depth = 2
gp.koza.half.max-depth = 6
gp.koza.half.growp = 0.5


# ------------------------------
# GP contraint nodes
# ------------------------------

#enforces used to enforce what types and arities nodes are allowed

#declare that this constraint is an instance of GPNode constraints
#each GP node must ferences a node contraint
gp.nc.2 = ec.gp.GPNodeConstraints

#Contraint name
gp.nc.2.name = nc2

#returns any type
gp.nc.2.returns = nil

#Specifies that the node takes 2 children
gp.nc.2.size =2

#Each child must also return nil, matcging the expected input type
#if strongly typed you'd use types like boolean, int, or float

pg.nc.2.child.0 = nil
gp.nc.2.child.1 = nil

# ------------------------------
# ADF Parameters
# ------------------------------

#Tells ecj to use ADFSTACK, which is capable of handaling multiple call frames for nested function calls

# GP ADF parameters
gp.problem.stack = ec.gp.ADFStack
gp.adf-stack.context = ec.gp.ADFContext


# ==============================
# Function or Termnial Set
# ==============================

#only look at one function set
gp.fs.size = 1

#basic params of function set with name, and 5 functions
gp.fs.0.name = f0
gp.fs.0.size = 5

#Is a single function
gp.fs.0.func.0 = baseline.jobShop.function.Add
#defines how many parameters it takes
gp.fs.0.func.0.nc = nc2

gp.fs.0.func.1 = baseline.jobShop.function.Div
gp.fs.0.func.1.nc = nc2

gp.fs.0.func.2 = baseline.jobShop.function.If
gp.fs.0.func.2.nc = nc2

gp.fs.0.func.3 = baseline.jobShop.function.Max
gp.fs.0.func.3.nc = nc2

gp.fs.0.func.4 = baseline.jobShop.function.Mul
gp.fs.0.func.4.nc = nc2

# ==============================
# Problem definition
# ==============================

#which problem file will be used
#or how the individuals evaluated
eval.problem = baseline.problem.baselineProblem
eval.problem.data = baseline.data.DoubleData


######## simulation spesfic ########

#defines what is the goal of the model
#goal right now is to minimize maximum tardiness
eval.problem.eval-model.objectives = 1
eval.problem.eval-model.objectives.0 = max-tardiness

#simulates job shop under 85% utilization
eval.problem.eval-model.sim-models = 1
eval.problem.eval-model.sim-models.0.util-level = 0.85

#Randomize seed per simulation
eval.problem.eval-model.rotate-sim-seed = true